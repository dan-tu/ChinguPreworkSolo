{"version":3,"sources":["search/SearchBar.js","search/SearchPanel.js","search/Search.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","searchtext","handleChange","bind","assertThisInitialized","handleSubmit","event","setState","target","value","preventDefault","search","react_default","a","createElement","className","onSubmit","type","onChange","placeholder","React","Component","SearchPanel","parseData","meteorites","children","forEach","el","push","data","geo","geolocation","latitude","longitude","year","substring","key","name","id","nametype","recclass","mass","fall","template","Search","PAGE_SIZE","pages","window","onscroll","innerHeight","document","documentElement","scrollTop","offsetHeight","loadMeteorites","searchMeteorites","_this2","fetch","then","res","json","concat","_this3","searchQuery","toLowerCase","search_SearchBar","search_SearchPanel","Banner","App","search_Search","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8d9b24ce.chunk.js","sourcesContent":["import React from 'react';\nimport '../App.css'\n\nclass SearchBar extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            searchtext: ''\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(event) {\n        this.setState({\n            searchtext: event.target.value\n        });\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        this.props.search(this.state.searchtext);\n    }\n\n    render() {\n        return (\n            <div className='container mb-3'>\n                <form className='form-inline justify-content-center' onSubmit={this.handleSubmit}>\n                    <input type=\"text\" value={this.state.searchtext} onChange={this.handleChange} className='form-control' placeholder='Search Meteorites'/> \n                    <button type='submit' className='btn btn-primary ml-2'>Submit</button>\n                </form>\n            </div>\n        );\n    }\n};\n\nexport default SearchBar;","import React from 'react';\nimport '../App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nclass SearchPanel extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.parseData = this.parseData.bind(this);\n    }\n\n    // Parse props for meteorites to load\n    parseData(meteorites) {\n        function template(data) {\n            if (data) {\n                let geo = <td>Unknown</td>;\n                if (data.geolocation) {\n                    geo = <td>{data.geolocation.latitude}, {data.geolocation.longitude}</td>;\n                }\n\n                let year = <td>Unknown</td>;\n                if (data.year) {\n                    year = <td>{data.year.substring(0, 4)}</td>;\n                }\n                \n                return (\n                    <tr key={data.name}>\n                        <td>{data.name}</td>\n                        <td>{data.id}</td>\n                        <td>{data.nametype}</td>\n                        <td>{data.recclass}</td>\n                        <td>{data.mass}</td>\n                        <td>{data.fall}</td>\n                        {year}\n                        {geo}\n                    </tr>\n                );\n            }\n        }\n\n        let children = [];\n        \n        meteorites.forEach(el => {\n            children.push(template(el));\n        })\n\n        return children;\n    }\n\n    render() {\n        let meteorites = this.parseData(this.props.meteorites);\n\n        return (        \n            <div className='container-fluid'>\n                <div className='row mx-5'>\n                    <table className='table table-dark rounded-lg'>\n                        <thead>\n                            <tr id='table-header'>\n                                <th>Name</th>\n                                <th>ID</th>\n                                <th>Name Type</th>\n                                <th>Rec Class</th>\n                                <th>Mass(g)</th>\n                                <th>Fall</th>\n                                <th>Year</th> \n                                <th>Coordinates (Lat, Long)</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {meteorites}\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default SearchPanel;","import React from 'react';\nimport SearchBar from './SearchBar';\nimport SearchPanel from './SearchPanel';\nimport '../App.css'\n\nclass Search extends React.Component {\n    PAGE_SIZE = 50;\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            meteorites: [],\n            pages: 1,\n            search: ''\n        };\n\n        // Implement page load when reach bottom\n        window.onscroll = () => {\n            if (window.innerHeight + document.documentElement.scrollTop === document.documentElement.offsetHeight) {\n                this.setState({\n                    pages: this.state.pages + 1\n                }, () => {\n                    this.loadMeteorites();\n                });\n            }\n        }\n\n        this.loadMeteorites = this.loadMeteorites.bind(this);\n        this.searchMeteorites = this.searchMeteorites.bind(this);\n    }\n\n    \n    componentDidMount() {\n        this.loadMeteorites();\n    }\n\n    // Fetch meteorites and set state depending on page\n    loadMeteorites() {\n        fetch('https://data.nasa.gov/resource/gh4g-9sfh.json?$order=name%20ASC&$limit=' + this.PAGE_SIZE \n        + '&$offset=' + (this.state.pages - 1) * this.PAGE_SIZE + this.state.search).then((res) => {\n            return res.json();\n        }).then((data) => {\n            this.setState({\n                meteorites: this.state.meteorites.concat(data)\n            });\n        });\n    }\n\n    // Searches (case insensitive) for meteorites with the given searchtext and updates the results\n    searchMeteorites(searchtext) {\n        let searchQuery = \"&$where=lower(name) like '%25\" + searchtext.toLowerCase() + \"%25'\";\n\n        // Reset meteorite results then fetch new query\n        this.setState({\n            search: searchQuery,\n            pages: 1,\n            meteorites: []\n        }, () => {\n            this.loadMeteorites();\n        });\n    }\n\n    render() {\n        return (\n            <div className='search-container'>\n                <SearchBar search={this.searchMeteorites}></SearchBar>\n                <SearchPanel meteorites={this.state.meteorites}></SearchPanel>\n            </div>\n        );\n    }\n}\n\nexport default Search;","import React from 'react';\nimport './App.css';\nimport Search from './search/Search'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Banner></Banner>\n      <Search></Search>\n    </div>\n  );\n}\n\nfunction Banner() {\n  return (\n    <h1 className=\"banner\">Meteorite Explorer</h1>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}